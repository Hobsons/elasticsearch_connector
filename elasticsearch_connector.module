<?php
/**
 * @file
 * This module provide an interface to connecting to the elasticsearch
 * cluster and implementing the Elastica library.
 *
 * Created on Dec 21, 2013
 */

define('ELASTICSEARCH_CONNECTOR_STATUS_INACTIVE', '0');
define('ELASTICSEARCH_CONNECTOR_STATUS_ACTIVE', '1');
define('ELASTICSEARCH_CONNECTOR_CLUSTER_STATUS_OK', 'ok');
define('ELASTICSEARCH_CONNECTOR_DEFAULT_LIBRARY', 'Elasticsearch\Client');

/**
 * Implements hook_init().
 */
function elasticsearch_connector_init() {

}

/**
 * Implements hook_cron()
 */
function elasticsearch_connector_cron() {
  // TODO: Check cluster node state and update cluster nodes if any changes.
  // Do this only if we have auto-node update configuration enabled.
  // The default state of the auto mode will be activeated!
}

/**
 * Implements hook_permission().
 */
function elasticsearch_connector_permission() {
   return array(
    'adminiser elasticsearch connector' => array(
      'title' => t('Administer elasticsearch connector'),
      'description' => t('Giving you access to administer elasticsearch clusters.'),
    ),
  );
}

function elasticsearch_connector_main_settings_path() {
  $settings_path = 'admin/config/elasticsearch-connector';
  return $settings_path;
}

function elasticsearch_connector_set_breadcrumb($links = array()) {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Configuration'), 'admin/config'),
    l(t('Elasticsearch connector'), elasticsearch_connector_main_settings_path()),
  );

  if (!empty($links)) {
    foreach ($links as $link) {
      $breadcrumb[] = $link;
    }
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implements hook_menu().
 */
function elasticsearch_connector_menu() {
  $items = array();
  $settings_path = elasticsearch_connector_main_settings_path();

  $items[$settings_path] = array(
    'title'              => 'Elasticsearch connector',
    'description'        => 'Administer Elasticsearch connector module',
    'position'           => 'left',
    'access arguments'   => array('adminiser elasticsearch connector'),
    'page callback'      => 'system_admin_menu_block_page',
    'file'               => 'system.admin.inc',
    'file path'          => drupal_get_path('module', 'system'),
  );

  $items[$settings_path . '/clusters'] = array(
    'title'             => 'Elasticsearch Clusters',
    'description'       => 'Showing all available clusters',
    'page callback'     => 'elasticsearch_connector_status_page',
    'access arguments'  => array('adminiser elasticsearch connector'),
    'file'              => 'elasticsearch_connector.admin.inc',
    'weight'            => -10,
  );

  $items[$settings_path . '/clusters/add'] = array(
    'title'              => 'Add cluster',
    'description'        => 'Add new elasticsearch cluster',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('elasticsearch_connector_edit_cluster'),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_LOCAL_ACTION,
  );

  $items[$settings_path . '/clusters/%elasticsearch_connector_cluster/edit'] = array(
    'title'              => 'Edit cluster',
    'description'        => 'Edit cluster settings',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('elasticsearch_connector_edit_cluster', 4),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_CALLBACK,
  );

  $items[$settings_path . '/clusters/%elasticsearch_connector_cluster/info'] = array(
    'title'              => 'Elasticsearch cluster info',
    'description'        => 'Elasticsearch cluster info',
    'page callback'      => 'elasticsearch_connector_info_cluster',
    'page arguments'     => array(4),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_CALLBACK,
  );

  $items[$settings_path . '/clusters/%elasticsearch_connector_cluster/delete'] = array(
    'title'              => 'Delete cluster',
    'description'        => 'Delete cluster settings',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('elasticsearch_connector_delete_cluster', 4),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Load an cluster object from database.
 *
 * @param string $cluster_id
 * @return object $cluster
 */
function elasticsearch_connector_cluster_load($cluster_id) {
  $object = db_select('elasticsearch_connector_cluster', 'ecc')
          ->fields('ecc')
          ->condition('cluster_id', $cluster_id, '=')->execute()->fetchObject();
  if (!empty($object->cluster_id)) {
    $object->options = unserialize($object->options);
  }

  return $object;
}

function elasticsearch_connector_cluster_load_all($active = TRUE, $load_as_options = FALSE) {
  $query = db_select('elasticsearch_connector_cluster', 'ecc')
    ->fields('ecc',array('cluster_id', 'name'))
    ->addTag('elasticsearch_connector_cluster_all');

  if ($active) {
    $query->condition('status', ELASTICSEARCH_CONNECTOR_STATUS_ACTIVE, '=');
  }

  $result = $query->execute();
  $options = array();
  if ($load_as_options) {
    $options[''] = t('None');
  }
  while ($row = $result->fetchAssoc()) {
    $options[$row['cluster_id']] = $row['name'];
  }

  return $options;
}

/**
 * Get the default connector (cluster) used for elasticsearch.
 *
 * @return string
 */
function elasticsearch_connector_get_default_connector() {
  return variable_get('elasticsearch_connector_get_default_connector', '');
}

/**
 * Set the default connector (cluster) used for elasticsearch.
 *
 * @return string
 */
function elasticsearch_connector_set_default_connector($connection) {
  return variable_set('elasticsearch_connector_get_default_connector', $connection);
}

/**
 *
 * @param unknown $cluster_id
 */
function elasticsearch_connector_get_client_by_id($cluster_id = NULL, $default_fallback = NULL) {
  if (!isset($cluster_id) && !empty($default_fallback)) {
    $cluster_id = elasticsearch_connector_get_default_connector();
  }

  if (!empty($cluster_id)) {
    $client = FALSE;
    $cluster = elasticsearch_connector_cluster_load($cluster_id);
    if ($cluster) {
      // TODO: Handle cluster connection.
      $client = elasticsearch_connector_get_client_by_url($cluster->url);
    }
  }
  else {
    // TODO: watchdog
  }

  return $client;
}

/**
 *
 * @param string $url
 * @return
 */
function elasticsearch_connector_get_client_by_url($url) {
  static $clients;
  // TODO: Add watchdog messages if not able to connect.
  if (!isset($clients[$url])) {
    $clients[$url] = FALSE;
    if (valid_url($url)) {
      $library = ELASTICSEARCH_CONNECTOR_DEFAULT_LIBRARY;
      $clients[$url] = new $library(
          array(
            'hosts' => array(
              $url
            )
          )
      );
    }
  }

  return $clients[$url];
}

/**
 * Return cluster info.
 * @param string $url
 * @return return array
 */
function elasticsearch_connector_get_cluster_info($url) {
  // TODO: Build a function that will return Elasticsearch object.
  $result = FALSE;
  $client = elasticsearch_connector_get_client_by_url($url);
  if (!empty($client)) {
    $info = $client->info();
    $result['client'] = $client;
    if ($info['ok'] == TRUE) {
      $result['info'] = $info;
      $result['state'] = $client->cluster()->state();
      $result['health'] = $client->cluster()->health();
    }
  }

  return $result;
}
