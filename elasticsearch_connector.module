<?php
/**
 * @file
 * This module provide an interface to connecting to the elasticsearch
 * cluster and implementing the Elastica library.
 *
 * Created on Dec 21, 2013
 */

define('ELASTICSEARCH_CONNECTOR_STATUS_INACTIVE', '0');
define('ELASTICSEARCH_CONNECTOR_STATUS_ACTIVE', '1');
define('ELASTICSEARCH_CONNECTOR_CLUSTER_STATUS_OK', '200');

/**
 * Implements hook_init().
 */
function elasticsearch_connector_init() {

}

/**
 * Implements hook_cron()
 */
function elasticsearch_connector_cron() {
  // TODO: Check cluster node state and update cluster nodes if any changes.
  // Do this only if we have auto-node update configuration enabled.
  // The default state of the auto mode will be activeated!
}

/**
 * Implements hook_permission().
 */
function elasticsearch_connector_permission() {
   return array(
    'adminiser elasticsearch connector' => array(
      'title' => t('Administer elasticsearch connector'),
      'description' => t('Giving you access to administer elasticsearch clusters.'),
    ),
  );
}

function elasticsearch_connector_main_settings_path() {
  $settings_path = 'admin/config/elasticsearch-connector';
  return $settings_path;
}

function elasticsearch_connector_set_breadcrumb($links = array()) {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Configuration'), 'admin/config'),
    l(t('Elasticsearch connector'), elasticsearch_connector_main_settings_path()),
  );

  if (!empty($links)) {
    foreach ($links as $link) {
      $breadcrumb[] = $link;
    }
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implements hook_menu().
 */
function elasticsearch_connector_menu() {
  $items = array();
  $settings_path = elasticsearch_connector_main_settings_path();

  $items[$settings_path] = array(
    'title'              => 'Elasticsearch connector',
    'description'        => 'Administer Elasticsearch connector module',
    'position'           => 'left',
    'access arguments'   => array('adminiser elasticsearch connector'),
    'page callback'      => 'system_admin_menu_block_page',
    'file'               => 'system.admin.inc',
    'file path'          => drupal_get_path('module', 'system'),
  );

  $items[$settings_path . '/clusters'] = array(
    'title'             => 'Elasticsearch Clusters',
    'description'       => 'Showing all available clusters',
    'page callback'     => 'elasticsearch_connector_status_page',
    'access arguments'  => array('adminiser elasticsearch connector'),
    'file'              => 'elasticsearch_connector.admin.inc',
    'weight'            => -10,
  );

  $items[$settings_path . '/clusters/add'] = array(
    'title'              => 'Add cluster',
    'description'        => 'Add new elasticsearch cluster',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('elasticsearch_connector_edit_cluster'),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_LOCAL_ACTION,
  );

  $items[$settings_path . '/clusters/%elasticsearch_connector_cluster/edit'] = array(
    'title'              => 'Edit cluster',
    'description'        => 'Edit cluster settings',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('elasticsearch_connector_edit_cluster', 4),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_CALLBACK,
  );

  $items[$settings_path . '/clusters/%elasticsearch_connector_cluster/info'] = array(
    'title'              => 'Elasticsearch cluster info',
    'description'        => 'Elasticsearch cluster info',
    'page callback'      => 'elasticsearch_connector_info_cluster',
    'page arguments'     => array(4),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_CALLBACK,
  );

  $items[$settings_path . '/clusters/%elasticsearch_connector_cluster/delete'] = array(
    'title'              => 'Delete cluster',
    'description'        => 'Delete cluster settings',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('elasticsearch_connector_delete_cluster', 4),
    'access arguments'   => array('adminiser elasticsearch connector'),
    'file'               => 'elasticsearch_connector.admin.inc',
    'type'               => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Save a cluster configuration object.
 *
 * @param stdclass $cluster
 *   The ElasticSearch cluster configuration object. This object should be
 *   loaded with elasticsearch_connector_cluster_load() or
 *   elasticsearch_connector_cluster_load_all()--otherwise, it is assumed to be
 *   a new configuration.
 */
function elasticsearch_connector_cluster_save($cluster) {
  ctools_include('export');

  $cluster = (object) $cluster;
  $cluster->options = serialize($cluster->options);

  if (isset($cluster->export_type) && $cluster->export_type & EXPORT_IN_DATABASE) {
    // Record exists in the database.
    $result = drupal_write_record('elasticsearch_connector_cluster', $cluster, 'cluster_id');
  }
  else {
    // Record is new, or exists only in code.
    $result = drupal_write_record('elasticsearch_connector_cluster', $cluster);
  }
}

/**
 * Delete an ElasticSearch cluster.
 *
 * @param stdclass $cluster
 *   A cluster configuration object.
 */
function elasticsearch_connector_cluster_delete($cluster) {
  db_delete('elasticsearch_connector_cluster')
    ->condition('cluster_id', $cluster->cluster_id)
    ->execute();
}

/**
 * Load a cluster object from the database.
 *
 * @see ctools_export_load_object().
 *
 * @param string $cluster_id
 * @return object $cluster
 */
function elasticsearch_connector_cluster_load($cluster_id) {
  ctools_include('export');
  $result = ctools_export_load_object('elasticsearch_connector_cluster', 'names', array($cluster_id));
  if (isset($result[$cluster_id])) {
    return $result[$cluster_id];
  }
}

/**
 * Load all cluster objects.
 *
 * @param bool $include_inactive
 *   Included inactive clusters. Defaults to true.
 *
 * @return array
 *   An array of ElasticSearch connection cluster objects.
 */
function elasticsearch_connector_clusters($include_inactive = TRUE) {
  ctools_include('export');
  $clusters = ctools_export_load_object('elasticsearch_connector_cluster', 'all');

  // Filter out inactive clusters.
  if (!$include_inactive) {
    foreach ($clusters as $cluster_id => $cluster) {
      if (!$cluster->status) {
        unset($clusters[$cluster_id]);
      }
    }
  }

  return $clusters;
}

function elasticsearch_connector_cluster_load_all($active = TRUE, $load_as_options = FALSE) {
  ctools_include('export');
  $clusters = ctools_export_load_object('elasticsearch_connector_cluster', 'all');

  $options = array();
  if ($load_as_options) {
    $options[''] = t('None');
  }

  foreach ($clusters as $cluster) {
    if (!$active || ($active && $cluster->status == ELASTICSEARCH_CONNECTOR_STATUS_ACTIVE)) {
      $options[$cluster->cluster_id] = $cluster->name;
    }
  }

  return $options;
}

/**
 * Get the default connector (cluster) used for elasticsearch.
 *
 * @return string
 */
function elasticsearch_connector_get_default_connector() {
  return variable_get('elasticsearch_connector_get_default_connector', '');
}

/**
 * Set the default connector (cluster) used for elasticsearch.
 *
 * @return string
 */
function elasticsearch_connector_set_default_connector($connection) {
  return variable_set('elasticsearch_connector_get_default_connector', $connection);
}

/**
 * Return the cluster object based on Cluster ID.
 *
 * @param string $cluster_id
 * @param boolean
 * @return object
 */
function elasticsearch_connector_get_client_by_id($cluster_id = NULL, $default_fallback = NULL) {
  if (!isset($cluster_id) && !empty($default_fallback)) {
    $cluster_id = elasticsearch_connector_get_default_connector();
  }

  if (!empty($cluster_id)) {
    $client = FALSE;
    $cluster = elasticsearch_connector_cluster_load($cluster_id);
    if ($cluster) {
      $client = elasticsearch_connector_load_library($cluster);
    }
  }

  return $client;
}

/**
 *
 * @param string $url
 * @return
 */
function elasticsearch_connector_load_library($cluster) {
  static $clients;

  if (!isset($clients[$cluster->cluster_id])) {
    $clients[$cluster->cluster_id] = FALSE;

    // TODO: Handle cluster connection. This should be accomplished if the setting is enabled.
    // If enabled, discover all the nodes in the cluster initialize the Pool connection.
    if (valid_url($cluster->url)) {
      $options = array(
        'hosts' => array($cluster->url),
      );
      try {
        if (!class_exists('\Elasticsearch\Client') && module_exists('composer_manager')) {
          // If the class doesn't exists try to explicity load the classes!
          // The issues is in update.php where search api call this function, but the function
          // has not been invoked.
          composer_manager_register_autoloader();
        }
        $clients[$cluster->cluster_id] = new \Elasticsearch\Client($options);
      }
      catch(Exception $e) {
        drupal_set_message($e->getMessage(), 'error');
      }
    }
  }

  return $clients[$cluster->cluster_id];
}

/**
 * Check if the status is OK.
 * @param array $status
 * @return bool
 */
function elasticsearch_connector_check_status(array $status) {
  if ($status['status'] == ELASTICSEARCH_CONNECTOR_CLUSTER_STATUS_OK) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the REST response is successful and with status code 200.
 * @param array $response
 * @return boolean
 */
function elasticsearch_connector_check_response_ack(array $response) {
  if (!empty($response['acknowledged'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Return cluster info.
 * @param object
 *    $cluster - The cluster object.
 * @return return array
 */
function elasticsearch_connector_get_cluster_info($cluster) {
  $result = FALSE;
  $client = elasticsearch_connector_load_library($cluster);
  if (!empty($client)) {
    try {
      $info = $client->info();
      $result['client'] = $client;
      if (elasticsearch_connector_check_status($info)) {
        //$client = new \Elasticsearch\Client();
        $result['info'] = $info;
        $result['state'] = $client->cluster()->state();
        $result['health'] = $client->cluster()->health();
        $result['stats'] = $client->nodes()->stats();
      }
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }

  return $result;
}

/**
 * Get the nodes stats from elasticsearch server.
 * @param \Elasticsearch\Client $client
 * @return array
 */
function elasticsearch_connector_get_cluster_nodes_stat(\Elasticsearch\Client $client) {
  try {
    return $client->nodes()->stats();
  }
  catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
}
