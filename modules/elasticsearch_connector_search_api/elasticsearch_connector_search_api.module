<?php
/**
 * @file
 * Provides a elasticsearch-based service class for the Search API.
 */

/**
 * Implements hook_search_api_service_info().
 */
function elasticsearch_connector_search_api_search_api_service_info() {
  $services = array();
  $services['search_api_elasticsearch_connector'] = array(
    'name' => t('Elasticsearch Connector service'),
    'description' => t('
    <p>Index items using a !url_elasticsearch search server.</p>
    <ul>
    <li>All field types are supported.</li>
    <li>Search API facets are supported.</li>
    <li>Will use internal elasticsearch preprocessors, so Search API preprocessors should for the most part be deactivated.</li>
    <li>See the README.txt file provided with this module for details.</li>
    </ul>',
        array(
          // Use directly the <a> tag because l() function break the building at some point.
          '!url_elasticsearch' => '<a href="' . url('http://www.elasticsearch.org/') . '">' . t('Elasticsearch') . '</a>',
        )),
    'class' => 'SearchApiElasticsearchConnector',
  );

  // If the ElasticSearch library isn't available, use a dummy service class.
  if (!class_exists('\Elasticsearch\Client')) {
    $services['search_api_elasticsearch_connector']['class'] = 'SearchApiElasticsearchConnectorMissing';
  }

  return $services;
}

/**
 * Implements hook_form_alter().
 */
function elasticsearch_connector_search_api_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_api_admin_add_index') {
    elasticsearch_connector_search_api_attach_ajax_callback($form);
    if (isset($form_state['values']) && !empty($form_state['values'])) {
      $add_options = elasticsearch_connector_search_api_elasticsearch_server_enabled($form_state['values']['server']);
      if ($add_options != FALSE) {
        elasticsearch_connector_search_api_return_form_options($form, $form_state, array(), 'add');
      }
    }
  }
  elseif ($form_id == 'search_api_admin_index_edit') {
    $default_values = $form_state['index']->options;
    elasticsearch_connector_search_api_attach_ajax_callback($form);
    if (!isset($form_state['values'])) {
      if (isset($form_state['build_info']['args']) && !empty($form_state['build_info']['args'])) {
        $index_obj = reset($form_state['build_info']['args']);
        $add_options = elasticsearch_connector_search_api_elasticsearch_server_enabled($index_obj->server);
        if ($add_options != FALSE) {
          elasticsearch_connector_search_api_return_form_options($form, $form_state, $default_values, 'edit');
        }
      }
    }
    else {
      $add_options = elasticsearch_connector_search_api_elasticsearch_server_enabled($form_state['values']['server']);
      if ($add_options != FALSE) {
        elasticsearch_connector_search_api_return_form_options($form, $form_state, $default_values, 'edit');
      }
    }
  }

  if ('search_api_admin_index_workflow' == $form_id) {
    // Remove all processors from the form for this server.
    if (elasticsearch_connector_search_api_elasticsearch_server_enabled($form_state['index']->server)) {
      foreach (element_children($form['processors']['status']) as $key) {
        $form['processors']['status'][$key]['#default'] = 0;
        $form['processors']['status'][$key]['#value'] = 0;
        $form['processors']['status'][$key]['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Attach the Ajax attributes.
 *
 * @param array $form
 */
function elasticsearch_connector_search_api_attach_ajax_callback(&$form) {
  $form['options']['#prefix'] = '<div id="elasticsearch-add-index">';
  $form['options']['#suffix'] = '</div>';

  $form['server']['#ajax'] = array(
    'callback' => 'elasticsearch_connector_search_api_ajax_callback',
    'wrapper' => 'elasticsearch-add-index',
    'method' => 'replace',
    'effect' => 'fade',
  );
}

/**
 * Add options common function.
 *
 * @param integer $server_machine_name
 */
function elasticsearch_connector_search_api_elasticsearch_server_enabled($server_machine_name) {
  if (isset($server_machine_name) && !empty($server_machine_name)) {
    $server_id = elasticsearch_connector_search_api_get_server_id_by_name($server_machine_name);
    if ($server_id != FALSE) {
      $server_obj = search_api_server_load($server_id);
      if (isset($server_obj) && !empty($server_obj)) {
        // TODO: Think of making this a module invoke or, think of addresing this to the
        // search_api author as feature request.
        if ($server_obj->class == 'search_api_elasticsearch_connector') {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Get server ID by name.
 *
 * @param integer $server_machine_name
 */
function elasticsearch_connector_search_api_get_server_id_by_name($server_machine_name) {
  $query = '';
  $result = '';

  try {
    $query = db_select('search_api_server', 'sas');
    $query->addField('sas', 'id');
    $query->condition('sas.machine_name', $server_machine_name, '=');
    $result = $query->execute()->fetchAssoc();
  }
  catch (Exception $e) {
    watchdog('Elastic Search', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (isset($result) && !empty($result)) {
    return reset($result);
  }
  else {
    return FALSE;
  }
}

/**
 * The form options for add/edit index.
 *
 * @param array $form
 * @param array $default_values
 */
function elasticsearch_connector_search_api_return_form_options(&$form, &$form_state, $default_values = array(), $flag) {
  global $databases;

  $default_options = $default_values + array(
    'number_of_shards' => 1,
    'number_of_replicas' => 0,
    'index_name' => $databases['default']['default']['database']
  );

  $form['options']['number_of_shards'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_options['number_of_shards'],
    '#size' => 4,
    '#title' => t('Number of shards'),
  );

  $form['options']['number_of_replicas'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_options['number_of_replicas'],
    '#size' => 4,
    '#title' => t('Number of replicas'),
  );

  // TODO: Build this an elasticsearch connector element with dropdown and add popup.
  $form['options']['index_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Index name'),
    '#required' => TRUE,
    '#element_validate' => array('elasticsearch_connector_search_api_index_name_validate'),
    '#default_value' => $default_options['index_name'],
    '#description' => t('The name of the ElasticSearch index to use. If this index does not already exist, it will be created.'),
  );

  $form['options']['collect_index_statistics'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collect index statistics'),
    '#default_value' => isset($default_options['collect_index_statistics']) ? $default_options['collect_index_statistics'] : 0,
    '#description' => t('Enable the statistics collection that will help you to better analys what the users are searching for.')
  );

  $form['options']['log_only_not_found'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log only the "Not found" results'),
    '#default_value' => isset($default_options['log_only_not_found']) ? $default_options['log_only_not_found'] : 0,
    '#description' => t('Log only the "Not found" results by skipping the rest.')
  );

  $form['options']['index_statistics_ttl'] = array(
    '#type' => 'textfield',
    '#title' => t('Statistics TTL interval'),
    '#element_validate' => array('_elasticsearch_connector_validate_ttl_field'),
    '#default_value' => isset($default_options['index_statistics_ttl']) ? $default_options['index_statistics_ttl'] : SearchApiElasticsearchConnectorStats::TTL,
    '#description' => t('Use format like 1d. Suffix can be d (days), m (minutes), h (hours), ms (milliseconds) or w (weeks).'
        . ' You can dynamically update the default interval.'
        . ' However it won\'t change the TTL of already indexed messages but will be used for future logs.')
  );
}

function elasticsearch_connector_search_api_index_name_validate($element, &$form_state, $form) {
  // Make sure the index name contains appropriate characters.
  if (!preg_match('/^[a-z][a-z0-9_]*$/i', $element['#value'])) {
    form_error($element, t('Enter an index name that begins with a letter and contains only letters, numbers, and underscores.'));
  }
}

/**
 * Implementation of hook_entity_presave().
 * @param object $entity
 * @param string $entity_type
 */
function elasticsearch_connector_search_api_entity_presave($entity, $entity_type) {
  if ('search_api_index' == $entity_type) {
    // If we are saving an index with elasticsearch server, unset all processors.
    $server = $entity->server();
    if (!empty($server) && $server->class == 'search_api_elasticsearch_connector') {
      if (!empty($entity->options['processors'])) {
        foreach($entity->options['processors'] as $proc_key => $proc_options) {
          $entity->options['processors'][$proc_key]['status'] = 0;
        }
      }
    }
  }
}

/**
 * Implements hook_search_api_index_update().
 *
 * @param SearchApiIndex $index
 *   The edited index.
 */
function elasticsearch_connector_search_api_search_api_index_update(SearchApiIndex $index) {
  $original_server = $index->original->server();
  $current_server = $index->server();
  if (!empty($original_server) && $original_server->class == 'search_api_elasticsearch_connector' && (empty($current_server) || $current_server->class != 'search_api_elasticsearch_connector')) {
    // We need to remove the index data from the index if we are going to change
    // the server.
  }

  if ($current_server->class == 'search_api_elasticsearch_connector') {
    // TODO: Update the elastic settings!
    // $current_server->updateSettings($index, $merge_types);
    // TODO: Create the index and the type if doesn't exists.
  }

}

/**
 * Ajax callback.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function elasticsearch_connector_search_api_ajax_callback($form, &$form_state) {
  return $form['options'];
}

/**
 * Implemens hook_elasticsearch_connector_edit_lock().
 */
function elasticsearch_connector_search_api_elasticsearch_connector_edit_lock($type, $cluster, $index = NULL) {
  if ('cluster' == $type) {
    $servers = search_api_server_load_multiple(FALSE);
    foreach ($servers as $id => $server) {
      if ('search_api_elasticsearch_connector' == $server->class) {
        return TRUE;
      }
    }
  }
  elseif ('index' == $type) {
    $indexes = search_api_index_load_multiple(FALSE);
    foreach($indexes as $id => $search_api_index) {
      if (!empty($search_api_index->options['index_name']) && $search_api_index->options['index_name'] == $index) {
        return TRUE;
      }
    }
  }

  return FALSE;
}
