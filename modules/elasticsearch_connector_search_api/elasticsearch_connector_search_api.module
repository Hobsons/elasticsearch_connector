<?php
/**
 * @file
 * Provides a elasticsearch-based service class for the Search API.
 *
 * TODO: Check what happen if we change the server of the index!
 * We need to remove the index data from the index if we are going to change
 * the server.
 *
 */

/**
 * Implements hook_search_api_service_info().
 */
function elasticsearch_connector_search_api_search_api_service_info() {
  $services['search_api_elasticsearch_connector'] = array(
    'name' => t('Elasticsearch Connector service'),
    'description' => t('
    <p>Index items using a !url_elasticsearch search server.</p>
    <ul>
    <li>All field types are supported.</li>
    <li>Search API facets are supported.</li>
    <li>Will use internal elasticsearch preprocessors, so Search API preprocessors should for the most part be deactivated.</li>
    <li>See the README.txt file provided with this module for details.</li>
    </ul>',
        array(
          '!url_elasticsearch' => l(t('Elasticsearch'), 'http://www.elasticsearch.org/'),
        )),
    'class' => 'SearchApiElasticsearchConnector',
  );
  return $services;
}

/**
 * Implements hook_form_alter().
 */
function elasticsearch_connector_search_api_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_api_admin_add_index') {
    elasticsearch_connector_search_api_attach_ajax_callback($form);
    if (isset($form_state['values']) && !empty($form_state['values'])) {
      $add_options = elasticsearch_connector_search_api_elasticsearch_server_enabled($form_state['values']['server']);
      if ($add_options != FALSE) {
        elasticsearch_connector_search_api_return_form_options($form, $form_state, array(), 'add');
      }
    }
  }
  elseif ($form_id == 'search_api_admin_index_edit') {
    $default_values = $form_state['index']->options;
    elasticsearch_connector_search_api_attach_ajax_callback($form);
    if (!isset($form_state['values'])) {
      if (isset($form_state['build_info']['args']) && !empty($form_state['build_info']['args'])) {
        $index_obj = reset($form_state['build_info']['args']);
        $add_options = elasticsearch_connector_search_api_elasticsearch_server_enabled($index_obj->server);
        if ($add_options != FALSE) {
          elasticsearch_connector_search_api_return_form_options($form, $form_state, $default_values, 'edit');
        }
      }
    }
    else {
      $add_options = elasticsearch_connector_search_api_elasticsearch_server_enabled($form_state['values']['server']);
      if ($add_options != FALSE) {
        elasticsearch_connector_search_api_return_form_options($form, $form_state, $default_values, 'edit');
      }
    }
  }

  if ('search_api_admin_index_workflow' == $form_id) {
    // Remove all processors from the form for this server.
    if (elasticsearch_connector_search_api_elasticsearch_server_enabled($form_state['index']->server)) {
      foreach (element_children($form['processors']['status']) as $key) {
        $form['processors']['status'][$key]['#default'] = 0;
        $form['processors']['status'][$key]['#value'] = 0;
        $form['processors']['status'][$key]['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Attach the Ajax attributes.
 *
 * @param array $form
 */
function elasticsearch_connector_search_api_attach_ajax_callback(&$form) {
  $form['options']['#prefix'] = '<div id="elasticsearch-add-index">';
  $form['options']['#suffix'] = '</div>';

  $form['server']['#ajax'] = array(
    'callback' => 'elasticsearch_connector_search_api_ajax_callback',
    'wrapper' => 'elasticsearch-add-index',
    'method' => 'replace',
    'effect' => 'fade',
  );
}

/**
 * Add options common function.
 *
 * @param integer $server_machine_name
 */
function elasticsearch_connector_search_api_elasticsearch_server_enabled($server_machine_name) {
  if (isset($server_machine_name) && !empty($server_machine_name)) {
    $server_id = elasticsearch_connector_search_api_get_server_id_by_name($server_machine_name);
    if ($server_id != FALSE) {
      $server_obj = search_api_server_load($server_id);
      if (isset($server_obj) && !empty($server_obj)) {
        // TODO: Think of making this a module invoke or, think of addresing this to the
        // search_api author as feature request.
        if ($server_obj->class == 'search_api_elasticsearch_connector') {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Get server ID by name.
 *
 * @param integer $server_machine_name
 */
function elasticsearch_connector_search_api_get_server_id_by_name($server_machine_name) {
  $query = '';
  $result = '';

  try {
    $query = db_select('search_api_server', 'sas');
    $query->addField('sas', 'id');
    $query->condition('sas.machine_name', $server_machine_name, '=');
    $result = $query->execute()->fetchAssoc();
  }
  catch (Exception $e) {
    watchdog('Elastic Search', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (isset($result) && !empty($result)) {
    return reset($result);
  }
  else {
    return FALSE;
  }
}

/**
 * The form options for add/edit index.
 *
 * @param array $form
 * @param array $default_values
 */
function elasticsearch_connector_search_api_return_form_options(&$form, &$form_state, $default_values = array(), $flag) {
  $default_options = $default_values + array(
    'number_of_shards' => 1,
    'number_of_replicas' => 0,
  );

  $form['options']['number_of_shards'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_options['number_of_shards'],
    '#size' => 4,
    '#title' => t('Number of shards'),
  );

  $form['options']['number_of_replicas'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_options['number_of_replicas'],
    '#size' => 4,
    '#title' => t('Number of replicas'),
  );
}

/**
 * Implements hook_search_api_index_insert().
 *
 * @param SearchApiIndex $index
 *   The new index.
 */
function elasticsearch_connector_search_api_search_api_index_insert(SearchApiIndex $index) {
  // TODO: Update processors for this index to be unset.
}

/**
 * Implements hook_search_api_index_update().
 *
 * @param SearchApiIndex $index
 *   The edited index.
 */
function elasticsearch_connector_search_api_search_api_index_update(SearchApiIndex $index) {
  // TODO: Update processors for this index to be unset.
  // TODO: Update the elastic settings!
  //$elastic_server->updateSettings($index, $merge_types);
}

/**
 * Ajax callback.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function elasticsearch_connector_search_api_ajax_callback($form, &$form_state) {
  return $form['options'];
}
